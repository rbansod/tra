.orderComparator(new CustomSequenceNumberComparator())

public class CustomSequenceNumberComparator implements Comparator<Message<?>> {
    @Override
    public int compare(Message<?> m1, Message<?> m2) {
        // Assuming the target object is the payload and it has a method to get sequence number
        TargetObject payload1 = (TargetObject) m1.getPayload();
        TargetObject payload2 = (TargetObject) m2.getPayload();
        return Integer.compare(payload1.getSequenceNumber(), payload2.getSequenceNumber());
    }
}

public class CustomMessageGroupProcessor implements MessageGroupProcessor {
    @Override
    public Object processMessageGroup(MessageGroup group) {
        List<Message<?>> sortedMessages = group.getMessages()
            .stream()
            .sorted((m1, m2) -> {
                TargetObject payload1 = (TargetObject) m1.getPayload();
                TargetObject payload2 = (TargetObject) m2.getPayload();
                return Integer.compare(payload1.getSequenceNumber(), payload2.getSequenceNumber());
            })
            .collect(Collectors.toList());
        return sortedMessages;
    }
}


File directory = new File("path/to/your/folder");

        if (!directory.exists()) {
            if (directory.mkdirs()) {
                System.out.println("Directory created successfully");
            } else {
                System.out.println("Failed to create directory");
            }
        } else {
            System.out.println("Directory already exists");
        }

