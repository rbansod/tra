package com.example.sipserver;

import javax.sip.*;
import javax.sip.address.AddressFactory;
import javax.sip.header.HeaderFactory;
import javax.sip.message.MessageFactory;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class SipService implements SipListener {
    private static final Logger logger = LoggerFactory.getLogger(SipService.class);
    private SipProvider sipProvider;
    private AddressFactory addressFactory;
    private HeaderFactory headerFactory;
    private MessageFactory messageFactory;

    public void init() throws Exception {
        SipFactory sipFactory = SipFactory.getInstance();
        Properties properties = new Properties();
        properties.setProperty("javax.sip.STACK_NAME", "SipServer");

        SipStack sipStack = sipFactory.createSipStack(properties);
        ListeningPoint listeningPoint = sipStack.createListeningPoint("0.0.0.0", 5060, "udp");
        sipProvider = sipStack.createSipProvider(listeningPoint);
        sipProvider.addSipListener(this);
        addressFactory = sipFactory.createAddressFactory();
        headerFactory = sipFactory.createHeaderFactory();
        messageFactory = sipFactory.createMessageFactory();
    }

    @Override
    public void processRequest(RequestEvent requestEvent) {
        Request request = requestEvent.getRequest();
        logger.info("Received request: " + request.getMethod());
        // Implement request handling
    }

    @Override
    public void processResponse(ResponseEvent responseEvent) {
        // Implement response handling
    }

    @Override
    public void processTimeout(TimeoutEvent timeoutEvent) {
        logger.warn("Transaction timed out");
    }

    @Override
    public void processIOException(IOExceptionEvent exceptionEvent) {
        logger.error("IO Exception in SIP Listener", exceptionEvent);
    }

    @Override
    public void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent) {
        // Handle transaction termination
    }

    @Override
    public void processDialogTerminated(DialogTerminatedEvent dialogTerminatedEvent) {
        // Handle dialog termination
    }

public void processResponse(ResponseEvent responseEvent) {
    Response response = responseEvent.getResponse();
    if (response.getStatusCode() == 200 && ((CSeqHeader) response.getHeader(CSeqHeader.NAME)).getMethod().equals(Request.INVITE)) {
        // Assume SDP is part of the 200 OK response
        SdpFactory sdpFactory = SdpFactory.getInstance();
        SessionDescription sdp = sdpFactory.createSessionDescription(new String(response.getRawContent()));
        // Extract media descriptions
        Vector<MediaDescription> mediaDescriptions = sdp.getMediaDescriptions(true);
        // Setup RTP stream for each media description
        mediaDescriptions.forEach(md -> {
            Media media = md.getMedia();
            int port = media.getMediaPort();
            String mediaType = media.getMediaType();
            // Assuming audio for simplicity
            if (mediaType.equals("audio")) {
                rtpService.createMediaStream("localIp", localRtpPort, "remoteIp", port); // Replace IPs and ports accordingly
            }
        });
    }
}

}
