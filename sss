import javax.sound.sampled.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;

// mulaw to pcm
public class MuLawToPCM {
    public static AudioInputStream decodeMuLaw(byte[] muLawData) throws UnsupportedAudioFileException, IOException {
        AudioFormat targetEncoding = AudioFormat.Encoding.PCM_SIGNED;
        AudioInputStream inputStream = new AudioInputStream(
            new ByteArrayInputStream(muLawData),
            getMuLawFormat(),
            muLawData.length
        );
        return AudioSystem.getAudioInputStream(targetEncoding, inputStream);
    }

    private static AudioFormat getMuLawFormat() {
        return new AudioFormat(
            AudioFormat.Encoding.ULAW,
            8000.0f, // Sample rate
            8,       // Bits per sample
            1,       // Channels
            1,       // Frame size
            8000.0f, // Frame rate
            false    // Big-endian
        );
    }
}


// Convert PCM byte array to 32-bit float array

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class PCMToFloat {
    public static float[] convertToFloatArray(byte[] pcmData, AudioFormat format) {
        int numSamples = pcmData.length / (format.getSampleSizeInBits() / 8);
        float[] floatData = new float[numSamples];
        
        for (int i = 0; i < numSamples; i++) {
            int sample = 0;
            if (format.getSampleSizeInBits() == 16) {
                sample = ByteBuffer.wrap(pcmData, i * 2, 2).order(ByteOrder.LITTLE_ENDIAN).getShort();
            } else if (format.getSampleSizeInBits() == 8) {
                sample = pcmData[i];
            }
            floatData[i] = sample / (float) (1 << (format.getSampleSizeInBits() - 1));
        }
        
        return floatData;
    }
}


//Resample 32-bit float array from 8kHz to 16kHz
public class ResampleFloat {
    public static float[] resample(float[] floatData, int originalSampleRate, int targetSampleRate) {
        int originalNumSamples = floatData.length;
        int targetNumSamples = (int) (((long) originalNumSamples * targetSampleRate) / originalSampleRate);
        float[] resampledData = new float[targetNumSamples];

        for (int i = 0; i < targetNumSamples - 1; i++) {
            float sampleIndex = (float) i * originalNumSamples / targetNumSamples;
            int index = (int) sampleIndex;
            float fraction = sampleIndex - index;

            float sample1 = floatData[index];
            float sample2 = floatData[Math.min(index + 1, originalNumSamples - 1)];

            resampledData[i] = sample1 + fraction * (sample2 - sample1);
        }

        // Handling the last sample
        resampledData[targetNumSamples - 1] = floatData[originalNumSamples - 1];

        return resampledData;
    }
}



// Clubbed together
import javax.sound.sampled.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;

public class AudioConverter {
    public static void main(String[] args) throws UnsupportedAudioFileException, IOException {
        byte[] muLawData = ... // Your μ-law encoded audio data

        // Step 1: Decode μ-law to PCM
        AudioInputStream pcmStream = MuLawToPCM.decodeMuLaw(muLawData);
        byte[] pcmData = new byte[pcmStream.available()];
        pcmStream.read(pcmData);

        // Step 2: Convert PCM to 32-bit float array
        float[] floatData = PCMToFloat.convertToFloatArray(pcmData, pcmStream.getFormat());

        // Step 3: Resample the float array from 8kHz to 16kHz
        float[] resampledData = ResampleFloat.resample(floatData, 8000, 16000);

        // resampledData now contains 16kHz PCM_FLOAT audio
    }
}


