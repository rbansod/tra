import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

@Configuration
public class AppConfig {

    @Bean
    public ConcurrentHashMap<String, AtomicLong> sequenceNumberMap() {
        return new ConcurrentHashMap<>();
    }
}

import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Component;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

@Component
public class SequenceNumberProcessor {

    public Message<?> addSequenceNumber(Message<?> message, ConcurrentHashMap<String, AtomicLong> sequenceNumbers) {
        String correlationId = (String) message.getHeaders().get("correlationId");
        if (correlationId == null) {
            throw new IllegalArgumentException("Message must contain a correlationId header");
        }

        AtomicLong sequenceNumber = sequenceNumbers.computeIfAbsent(correlationId, k -> new AtomicLong());

        long seqNum = sequenceNumber.incrementAndGet();
        return MessageBuilder.fromMessage(message)
                .setHeader("sequenceNumber", seqNum)
                .build();
    }
}

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.integration.channel.DirectChannel;
import org.springframework.integration.dsl.IntegrationFlows;
import org.springframework.integration.dsl.StandardIntegrationFlow;
import org.springframework.integration.dsl.Transformers;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessageHandler;

@Configuration
public class IntegrationConfig {

    @Bean
    public MessageChannel inputChannel() {
        return new DirectChannel();
    }

    @Bean
    public MessageChannel intermediateChannel() {
        return new DirectChannel();
    }

    @Bean
    public MessageChannel outputChannel() {
        return new DirectChannel();
    }

    @Bean
    public StandardIntegrationFlow integrationFlow(MessageHandler messageHandler, SequenceNumberProcessor sequenceNumberProcessor, ConcurrentHashMap<String, AtomicLong> sequenceNumberMap) {
        return IntegrationFlows.from(inputChannel())
                .handle(messageHandler)
                .channel(intermediateChannel())
                .transform(message -> sequenceNumberProcessor.addSequenceNumber(message, sequenceNumberMap))
                .channel(outputChannel())
                .get();
    }
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.integration.support.MessageBuilder;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.stereotype.Service;

@Service
public class MessageService {

    @Autowired
    private MessageChannel inputChannel;

    @Autowired
    private MessageChannel outputChannel;

    public void sendMessage(String payload, String correlationId) {
        Message<String> message = MessageBuilder.withPayload(payload)
                                                .setHeader("correlationId", correlationId)
                                                .build();
        inputChannel.send(message);
    }

    public Message<?> receiveMessage() {
        return ((DirectChannel) outputChannel).receive();
    }
}
